{"ast":null,"code":"var _jsxFileName = \"/Users/harun/Documents/Capstone_Project/capstone-frontend/src/components/DeliveryJob.jsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport \"../styles/delivery-jobs.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DeliveryJob = ({\n  job,\n  updateBtn,\n  btnMessage\n}) => {\n  _s();\n  const [estimatedDuration, setEstimatedDuration] = useState(null);\n  useEffect(() => {\n    // Warehouse coordinates (replace with actual coordinates)\n    const warehouseLatitude = WAREHOUSE_LATITUDE;\n    const warehouseLongitude = WAREHOUSE_LONGITUDE;\n\n    // Delivery coordinates\n    const deliveryLatitude = job.latitude;\n    const deliveryLongitude = job.longitude;\n\n    // Calculate distance using Haversine formula\n    const distance = calculateDistance(warehouseLatitude, warehouseLongitude, deliveryLatitude, deliveryLongitude);\n\n    // Assume average speed of 30 mph for delivery vehicles\n    const averageSpeed = 30; // miles per hour\n\n    // Calculate estimated duration (in hours)\n    const estimatedDurationHours = distance / averageSpeed;\n\n    // Round duration to nearest whole number\n    const roundedDuration = Math.round(estimatedDurationHours);\n\n    // Set estimated duration\n    setEstimatedDuration(roundedDuration);\n  }, [job]);\n\n  // Function to calculate distance using Haversine formula\n  const calculateDistance = (lat1, lon1, lat2, lon2) => {\n    const R = 6371; // Radius of the Earth in km\n    const dLat = deg2rad(lat2 - lat1);\n    const dLon = deg2rad(lon2 - lon1);\n    const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    const distance = R * c; // Distance in km\n    return distance;\n  };\n\n  // Function to convert degrees to radians\n  const deg2rad = deg => {\n    return deg * (Math.PI / 180);\n  };\n\n  // Rest of your component code\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"job-listing\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"job-details\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Recipient: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this), \" \", job.customerName]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Address: \", job.address]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Postcode: \", job.postcode]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Estimated Duration: \", estimatedDuration, \" hours\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n_s(DeliveryJob, \"G3hcvYzeoQwSV+9nMDG++2gbWE0=\");\n_c = DeliveryJob;\nexport default DeliveryJob;\nvar _c;\n$RefreshReg$(_c, \"DeliveryJob\");","map":{"version":3,"names":["useState","useEffect","jsxDEV","_jsxDEV","DeliveryJob","job","updateBtn","btnMessage","_s","estimatedDuration","setEstimatedDuration","warehouseLatitude","WAREHOUSE_LATITUDE","warehouseLongitude","WAREHOUSE_LONGITUDE","deliveryLatitude","latitude","deliveryLongitude","longitude","distance","calculateDistance","averageSpeed","estimatedDurationHours","roundedDuration","Math","round","lat1","lon1","lat2","lon2","R","dLat","deg2rad","dLon","a","sin","cos","c","atan2","sqrt","deg","PI","className","children","fileName","_jsxFileName","lineNumber","columnNumber","customerName","address","postcode","_c","$RefreshReg$"],"sources":["/Users/harun/Documents/Capstone_Project/capstone-frontend/src/components/DeliveryJob.jsx"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport \"../styles/delivery-jobs.css\";\n\nconst DeliveryJob = ({ job, updateBtn, btnMessage }) => {\n  const [estimatedDuration, setEstimatedDuration] = useState(null);\n\n  useEffect(() => {\n    // Warehouse coordinates (replace with actual coordinates)\n    const warehouseLatitude = WAREHOUSE_LATITUDE;\n    const warehouseLongitude = WAREHOUSE_LONGITUDE;\n\n    // Delivery coordinates\n    const deliveryLatitude = job.latitude;\n    const deliveryLongitude = job.longitude;\n\n    // Calculate distance using Haversine formula\n    const distance = calculateDistance(\n      warehouseLatitude, warehouseLongitude, deliveryLatitude, deliveryLongitude\n    );\n\n    // Assume average speed of 30 mph for delivery vehicles\n    const averageSpeed = 30; // miles per hour\n\n    // Calculate estimated duration (in hours)\n    const estimatedDurationHours = distance / averageSpeed;\n\n    // Round duration to nearest whole number\n    const roundedDuration = Math.round(estimatedDurationHours);\n\n    // Set estimated duration\n    setEstimatedDuration(roundedDuration);\n  }, [job]);\n\n  // Function to calculate distance using Haversine formula\n  const calculateDistance = (lat1, lon1, lat2, lon2) => {\n    const R = 6371; // Radius of the Earth in km\n    const dLat = deg2rad(lat2 - lat1);\n    const dLon = deg2rad(lon2 - lon1);\n    const a =\n      Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n      Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) *\n      Math.sin(dLon / 2) * Math.sin(dLon / 2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    const distance = R * c; // Distance in km\n    return distance;\n  };\n\n  // Function to convert degrees to radians\n  const deg2rad = (deg) => {\n    return deg * (Math.PI / 180);\n  };\n\n  // Rest of your component code\n\n  return (\n    <section className=\"job-listing\">\n      <div className=\"job-details\">\n        <p>\n          <span>Recipient: </span> {job.customerName}\n        </p>\n        <p>Address: {job.address}</p>\n        <p>Postcode: {job.postcode}</p>\n        <p>Estimated Duration: {estimatedDuration} hours</p>\n        {/* Other details */}\n      </div>\n      {/* Map and other components */}\n    </section>\n  );\n};\n\nexport default DeliveryJob;\n"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAO,6BAA6B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErC,MAAMC,WAAW,GAAGA,CAAC;EAAEC,GAAG;EAAEC,SAAS;EAAEC;AAAW,CAAC,KAAK;EAAAC,EAAA;EACtD,MAAM,CAACC,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAEhEC,SAAS,CAAC,MAAM;IACd;IACA,MAAMU,iBAAiB,GAAGC,kBAAkB;IAC5C,MAAMC,kBAAkB,GAAGC,mBAAmB;;IAE9C;IACA,MAAMC,gBAAgB,GAAGV,GAAG,CAACW,QAAQ;IACrC,MAAMC,iBAAiB,GAAGZ,GAAG,CAACa,SAAS;;IAEvC;IACA,MAAMC,QAAQ,GAAGC,iBAAiB,CAChCT,iBAAiB,EAAEE,kBAAkB,EAAEE,gBAAgB,EAAEE,iBAC3D,CAAC;;IAED;IACA,MAAMI,YAAY,GAAG,EAAE,CAAC,CAAC;;IAEzB;IACA,MAAMC,sBAAsB,GAAGH,QAAQ,GAAGE,YAAY;;IAEtD;IACA,MAAME,eAAe,GAAGC,IAAI,CAACC,KAAK,CAACH,sBAAsB,CAAC;;IAE1D;IACAZ,oBAAoB,CAACa,eAAe,CAAC;EACvC,CAAC,EAAE,CAAClB,GAAG,CAAC,CAAC;;EAET;EACA,MAAMe,iBAAiB,GAAGA,CAACM,IAAI,EAAEC,IAAI,EAAEC,IAAI,EAAEC,IAAI,KAAK;IACpD,MAAMC,CAAC,GAAG,IAAI,CAAC,CAAC;IAChB,MAAMC,IAAI,GAAGC,OAAO,CAACJ,IAAI,GAAGF,IAAI,CAAC;IACjC,MAAMO,IAAI,GAAGD,OAAO,CAACH,IAAI,GAAGF,IAAI,CAAC;IACjC,MAAMO,CAAC,GACLV,IAAI,CAACW,GAAG,CAACJ,IAAI,GAAG,CAAC,CAAC,GAAGP,IAAI,CAACW,GAAG,CAACJ,IAAI,GAAG,CAAC,CAAC,GACvCP,IAAI,CAACY,GAAG,CAACJ,OAAO,CAACN,IAAI,CAAC,CAAC,GAAGF,IAAI,CAACY,GAAG,CAACJ,OAAO,CAACJ,IAAI,CAAC,CAAC,GACjDJ,IAAI,CAACW,GAAG,CAACF,IAAI,GAAG,CAAC,CAAC,GAAGT,IAAI,CAACW,GAAG,CAACF,IAAI,GAAG,CAAC,CAAC;IACzC,MAAMI,CAAC,GAAG,CAAC,GAAGb,IAAI,CAACc,KAAK,CAACd,IAAI,CAACe,IAAI,CAACL,CAAC,CAAC,EAAEV,IAAI,CAACe,IAAI,CAAC,CAAC,GAAGL,CAAC,CAAC,CAAC;IACxD,MAAMf,QAAQ,GAAGW,CAAC,GAAGO,CAAC,CAAC,CAAC;IACxB,OAAOlB,QAAQ;EACjB,CAAC;;EAED;EACA,MAAMa,OAAO,GAAIQ,GAAG,IAAK;IACvB,OAAOA,GAAG,IAAIhB,IAAI,CAACiB,EAAE,GAAG,GAAG,CAAC;EAC9B,CAAC;;EAED;;EAEA,oBACEtC,OAAA;IAASuC,SAAS,EAAC,aAAa;IAAAC,QAAA,eAC9BxC,OAAA;MAAKuC,SAAS,EAAC,aAAa;MAAAC,QAAA,gBAC1BxC,OAAA;QAAAwC,QAAA,gBACExC,OAAA;UAAAwC,QAAA,EAAM;QAAW;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC,KAAC,EAAC1C,GAAG,CAAC2C,YAAY;MAAA;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACzC,CAAC,eACJ5C,OAAA;QAAAwC,QAAA,GAAG,WAAS,EAACtC,GAAG,CAAC4C,OAAO;MAAA;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC7B5C,OAAA;QAAAwC,QAAA,GAAG,YAAU,EAACtC,GAAG,CAAC6C,QAAQ;MAAA;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC/B5C,OAAA;QAAAwC,QAAA,GAAG,sBAAoB,EAAClC,iBAAiB,EAAC,QAAM;MAAA;QAAAmC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEjD;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEC,CAAC;AAEd,CAAC;AAACvC,EAAA,CAjEIJ,WAAW;AAAA+C,EAAA,GAAX/C,WAAW;AAmEjB,eAAeA,WAAW;AAAC,IAAA+C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}